// SIDL for Apps service

enum AppsInstallState {
  Installed   // App is installed
  Installing  // Installing the app
  Pending     // The installing get suspensed
}

enum AppsUpdateState {
  Idle        // No update is on going
  Available   // Newer versoin is available
  Downloading // Downloading the new version
  Updating    // Updating to the new version
  Pending     // The updating get suspensed
}

enum AppsStatus {
  Enabled    // App is installed and available to the users
  Disabled   // App is installed but not available to the users
}

enum AppsServiceState {
  Initializing  // The service is not ready
  Running       // The service is ready
  Terminating   // Shutting down the service
}

enum AppsServiceError {
  AppNotFound             // App is not in the list
  Canceled                // App install or update is canceld by user
  ClearDataError          // Failed to clear app data
  DependenciesError       // Dependencies are not met
  DiskSpaceNotEnough      // Do not have enough disk space
  DownloadManifestFailed  // Can't download the meta manifest
  DownloadPackageFailed   // Can't download the app package
  DuplicatedAction        // Requested action is duplicated
  InvalidAppName          // App name is not allowed to use
  InvalidIcon             // Error in the icon object
  InvalidStartUrl         // Error in the manifest file
  InvalidState            // The service is not ready
  InvalidManifest         // Error in the manifest file
  InvalidPackage          // Error in the package file
  InvalidSignature        // Failed to verify the signature
  InvalidCertificate      // Failed to parse certificate
  NetworkFailure          // Error in the Network
  FilesystemFailure       // Error in app stroage filesystem
  PackageCorrupt          // Can't open the downloaded package
  RegistrationError       // Can't register the app webapps json
  ReinstallForbidden      // Do not allow reinstall an existing app
  UpdateError             // Error during update the app
  UninstallForbidden      // Do not allow to uninstall the app
  UninstallError          // Error during uninstall the app
  UnknownError            // Other undefined error
}

enum ConnectionType {
    WiFiOnly
    Any
}

enum ClearType {
  Browser                 // Clear cookie and data registered to different service.
                          //   Such as, alarm, push, and sync etc ...
  Storage                 // Clear Apps local storage, such as indexDB.
}

enum TokenType {
    Account            // Token from account
    Restricted         // Restricted token which has less permission
}

dictionary Token {
  key_id: str
  mac_key: str
  token_type: TokenType
}

callback TokenProvider {
  fn get_token(token_type: TokenType) -> Token
}

dictionary AppsObject {
  name: str
  installState: AppsInstallState
  manifestURL: str
  removable: bool
  status: AppsStatus
  updateManifestURL: str
  updateState: AppsUpdateState
  updateURL: str
  allowedAutoDownload: bool
  preloaded: bool
  progress: int  // From 0 to 100
  origin: str    // The app runtime origin
}

dictionary DownloadFailedReason {
  appsObject: AppsObject
  reason: AppsServiceError
}

dictionary AppsOptions {
  autoInstall: bool?
}

dictionary UpdatePolicy {
    enabled: bool              // To enable/disable auto update check.
    conn_type: ConnectionType  // The type of network are allow to use
    delay: int                 // Update check for certain time after a success check in seconds
}

#[rust:not-tracked]
interface AppsEngine {

  // In: None
  // Return: a list of apps or an error string.
  fn get_all() -> AppsObject*, AppsServiceError

  // In: the manifest URL of a app
  // Return: the app object or an error string.
  fn get_app(manifest_url: str) -> AppsObject, AppsServiceError

  // In: None
  // Return: the runtime state for the appservice
  fn get_state() -> AppsServiceState

  // In: the URL of a app in store server
  // Return: the app object or an error
  fn install_package(update_url: str) -> AppsObject, AppsServiceError

  // In: the URL of a app in store server
  // Return: the app object or an error
  fn uninstall(manifest_url: str) -> str, AppsServiceError

  // In: the URL of a app in store server
  // Return: the app update available or an error string.
  fn check_for_update(update_url:str, appsOption: AppsOptions) -> bool, AppsServiceError

  // In: The URL of a PWA manifest from the host server
  // Return: the app object or an error
  fn install_pwa(manifest_url: str) -> AppsObject, AppsServiceError

  // In: the manifest URL of a app and data type to be cleared.
  // Return: resolve or an error string.
  fn clear(manifest_url: str, data_type: ClearType) -> bool, AppsServiceError

  // In: the URL of a app in store server
  // Return: the app object or an error string.
  fn update(manifest_url: str) -> AppsObject, AppsServiceError

  // In: the URL of an app in store server
  // Return: the app object or an error string.
  fn cancel_download(update_url: str) -> AppsObject, AppsServiceError

  // In: config for update policy
  // Return: successfully set or not.
  fn set_update_policy(config: UpdatePolicy) -> bool

  // Return auto update policy
  fn get_update_policy() -> UpdatePolicy


  // In: Token provider, which is used later by app service to get token
  fn set_token_provider(provider: TokenProvider)

  // Report the app object which is updated successfully
  event appUpdated -> AppsObject
  // Report the app object which is installed successfully
  event appInstalled -> AppsObject
  // Report the app object which is being installed
  event appInstalling -> AppsObject
  // Report the app object which is being updated
  event appUpdating -> AppsObject
  // Report AppsObject when app failed to download
  event appDownloadFailed -> DownloadFailedReason
  // Report AppsObject when an update is available
  event appUpdateAvailable -> AppsObject
  // Report the manifest URL which is uninstalled successfully.
  event appUninstalled -> str

  event appstatusChanged -> AppsObject

  fn setEnabled(manifest_url: str, status: AppsStatus) -> AppsObject, AppsServiceError
  // Verify the signature of an application.
  // manifestUrl, the manifest url of the app to be verified
  // cert_type, the certificate to verify against, possible values are:
  // "production" ,"stage", "ven1", "ven2"
  // folder_name, the name of the folder that contains signed data.
  // Possible values are(case insensitive): "INF", "VEN", etc.
  // Return: the fingerprint of the certificate in rsa or AppsServiceError
  fn verify(manifestUrl: str, cert_type: str, folder_name: str) -> str, AppsServiceError

}

#[permission=webapps-manage]
service AppsManager: AppsEngine
